class Battleship(AbstractBattleship):
    # ... rest of the code

    def create_ship_placement(self, game_id: str, placement: ShipPlacement) -> None:
        # Check if all ships have already been placed
        if len(self.games[game_id].ships) >= 5:
            raise ValueError("All ships are already placed. Cannot place more ships.")
        # ... rest of the code

    def delete_game(self, game_id: str) -> None:
        if game_id in self.games:
            del self.games[game_id]

    def create_turn(self, game_id: str, turn: Turn) -> TurnResponse:
        # ... rest of the code

        # Check if the target has already been hit or missed
        if target_key in self.games[game_id].board:
            return TurnResponse(result=self.games[game_id].board[target_key], ship_type=None)

        # ... rest of the code

        # Check if the hit ship has been sunk
        if result == "hit":
            hit_count = list(self.games[game_id].board.values()).count("hit")
            if hit_count == self.SHIP_LENGTHS[hit_ship.ship_type]:
                result = "sunk"

        return TurnResponse(result=result, ship_type=hit_ship.ship_type if hit_ship else None)