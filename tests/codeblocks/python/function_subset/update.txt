# ... code

class Battleship(AbstractBattleship):
    # ... code

    def create_ship_placement(self, game_id: str, placement: ShipPlacement) -> None:
        # ... code

        if placement.direction == "horizontal":
            if start_column + ship_length > 10:
                raise ValueError("Ship extends beyond board boundaries")
            for i in range(ship_length):
                if (start_row, start_column + i) in game.board:
                    raise ValueError("Ships cannot overlap")
        elif placement.direction == "vertical":
            if start_row + ship_length > 10:
                raise ValueError("Ship extends beyond board boundaries")
            for i in range(ship_length):
                if (start_row + i, start_column) in game.board:
                    raise ValueError("Ships cannot overlap")
        else:
            raise ValueError("Invalid ship direction")

        # Add the ship to the board
        if placement.direction == "horizontal":
            for i in range(ship_length):
                game.board[(start_row, start_column + i)] = "ship"
        else:  # placement.direction == "vertical"
            for i in range(ship_length):
                game.board[(start_row + i, start_column)] = "ship"

        game.ships.append(placement)

    def create_turn(self, game_id: str, turn: Turn) -> TurnResponse:
        # ... code

        if (target_row, target_column) in game.board and game.board[(target_row, target_column)] != "miss":
            raise ValueError("Cannot target the same grid cell twice")

        # ... code

    def create_ship_placement(self, game_id: str, placement: ShipPlacement) -> None:
        # ... code

        if placement.ship_type not in self.SHIP_LENGTHS:
            raise ValueError("Invalid ship type")

        ship_length = self.SHIP_LENGTHS[placement.ship_type]

        # ... code

# ... code
