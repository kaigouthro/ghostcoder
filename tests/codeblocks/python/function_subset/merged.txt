import uuid
from typing import Dict, List
from abstract_class import AbstractBattleship, Game, GameStatus, ShipPlacement, Turn, TurnResponse

class Battleship(AbstractBattleship):
    def __init__(self):
        self.games: Dict[str, Game] = {}

    def create_game(self) -> str:
        game_id = str(uuid.uuid4())
        self.games[game_id] = Game(game_id=game_id, players=["Player1", "Player2"], board={}, ships=[], turns=[])
        return game_id

    def delete_game(self, game_id: str) -> None:
        if game_id in self.games:
            del self.games[game_id]

    def get_game(self, game_id: str) -> Game:
        return self.games.get(game_id)

    def create_ship_placement(self, game_id: str, placement: ShipPlacement) -> None:
        game = self.get_game(game_id)
        if not game:
            raise ValueError("Game not found.")
        if len(game.ships) >= 5:
            raise ValueError("All ships are already placed. Cannot place more ships.")
        if placement.direction not in ["horizontal", "vertical"]:
            raise ValueError("Invalid ship direction")
        if placement.ship_type not in self.SHIP_LENGTHS.keys():
            raise ValueError("Invalid ship type")
        if placement.direction == "horizontal" and ord(placement.start["column"]) - ord('A') + self.SHIP_LENGTHS[placement.ship_type] > 10:
            raise ValueError("Ship extends beyond board boundaries")
        if placement.direction == "vertical" and placement.start["row"] + self.SHIP_LENGTHS[placement.ship_type] > 10:
            raise ValueError("Ship extends beyond board boundaries")
        for ship in game.ships:
            if ship.start["row"] == placement.start["row"] and ship.start["column"] == placement.start["column"]:
                raise ValueError("Ships cannot overlap")
        game.ships.append(placement)
        # Add ship's position to the board
        for i in range(self.SHIP_LENGTHS[placement.ship_type]):
            if placement.direction == "horizontal":
                game.board[(placement.start["row"], ord(placement.start["column"]) - ord('A') + i)] = placement.ship_type
            else:
                game.board[(placement.start["row"] + i, ord(placement.start["column"]) - ord('A'))] = placement.ship_type

    def create_turn(self, game_id: str, turn: Turn) -> TurnResponse:
        game = self.get_game(game_id)
        if not game:
            raise ValueError("Game not found.")
        if len(game.ships) < 5:
            raise ValueError("All ships must be placed before starting turns.")
        game.turns.append(turn)
        target_key = (turn.target["row"], ord(turn.target["column"]) - ord('A'))
        if target_key in game.board:
            ship_type = game.board[target_key]
            game.board[target_key] = "hit"
            # Check if the ship is sunk
            if not any(value == ship_type for value in game.board.values()):
                return TurnResponse(result="sunk", ship_type=ship_type)
            return TurnResponse(result="hit", ship_type=ship_type)
        game.board[target_key] = "miss"
        return TurnResponse(result="miss", ship_type=None)

    def get_game_status(self, game_id: str) -> GameStatus:
        game = self.get_game(game_id)
        if not game:
            raise ValueError("Game not found.")
        if len(game.turns) == 0:
            return GameStatus(is_game_over=False, winner=None)
        if len(game.turns) >= 100:
            return GameStatus(is_game_over=True, winner="Player1" if len(game.turns) % 2 == 0 else "Player2")
        return GameStatus(is_game_over=False, winner=None)

    def get_winner(self, game_id: str) -> str:
        game_status = self.get_game_status(game_id)
        if game_status.is_game_over:
            return game_status.winner
        return None